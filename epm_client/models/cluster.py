# coding: utf-8

"""
    EPM REST API

    REST API description of the ElasTest Platform Manager Module.

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Cluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, key=None, master=None, nodes=None, resource_group_id=None):
        """
        Cluster - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'key': 'str',
            'master': 'Worker',
            'nodes': 'list[Worker]',
            'resource_group_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'key': 'key',
            'master': 'master',
            'nodes': 'nodes',
            'resource_group_id': 'resourceGroupId'
        }

        self._id = id
        self._type = type
        self._key = key
        self._master = master
        self._nodes = nodes
        self._resource_group_id = resource_group_id

    @property
    def id(self):
        """
        Gets the id of this Cluster.


        :return: The id of this Cluster.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Cluster.


        :param id: The id of this Cluster.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Cluster.
        Type of the Cluster.

        :return: The type of this Cluster.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Cluster.
        Type of the Cluster.

        :param type: The type of this Cluster.
        :type: str
        """

        self._type = type

    @property
    def key(self):
        """
        Gets the key of this Cluster.
        Key of the Cluster.

        :return: The type of this Cluster.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Cluster.
        Key of the Cluster.

        :param type: The type of this Cluster.
        :key: str
        """

        self._key = key

    @property
    def master(self):
        """
        Gets the master of this Cluster.


        :return: The master of this Cluster.
        :rtype: Worker
        """
        return self._master

    @master.setter
    def master(self, master):
        """
        Sets the master of this Cluster.


        :param master: The master of this Cluster.
        :type: Worker
        """

        self._master = master

    @property
    def nodes(self):
        """
        Gets the nodes of this Cluster.


        :return: The nodes of this Cluster.
        :rtype: list[Worker]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this Cluster.


        :param nodes: The nodes of this Cluster.
        :type: list[Worker]
        """

        self._nodes = nodes

    @property
    def resource_group_id(self):
        """
        Gets the resource_group_id of this Cluster.


        :return: The resource_group_id of this Cluster.
        :rtype: str
        """
        return self._resource_group_id

    @resource_group_id.setter
    def resource_group_id(self, resource_group_id):
        """
        Sets the resource_group_id of this Cluster.


        :param resource_group_id: The resource_group_id of this Cluster.
        :type: str
        """

        self._resource_group_id = resource_group_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
